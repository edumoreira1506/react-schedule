4759ecd797a1d00da5aa4352268e7d76
"use strict";

var _interopRequireDefault = require("/var/www/html/react-schedule/node_modules/@babel/runtime/helpers/interopRequireDefault");

var _react = _interopRequireDefault(require("react"));

var _reactTestRenderer = require("react-test-renderer");

var _Schedule = _interopRequireDefault(require("./../components/schedule/Schedule"));

var _jsxFileName = "/var/www/html/react-schedule/src/tests/Schedule.spec.js";
const title = 'TITLE HERE';
const emptyArray = new Array();
const emptyString = '';
const zero = 0;

const makeSchedule = title => {
  return (0, _reactTestRenderer.create)(_react.default.createElement(_Schedule.default, {
    title: title,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 11
    },
    __self: void 0
  }));
};

describe('Schedule component', () => {
  const schedule = makeSchedule(title);
  const instance = schedule.getInstance();
  test('Matches the snapshot', () => {
    expect(schedule.toJSON()).toMatchSnapshot();
  });
  test('Title of schedule', () => {
    expect(instance.props.title).toBe(title);
  });
  test('Empty itens on new instace', () => {
    expect(instance.state.items).toStrictEqual(emptyArray);
    expect(instance.state.time).toBe(emptyString);
    expect(instance.state.type).toBe(emptyString);
    expect(instance.state.date).toBe(emptyString);
    expect(instance.state.studiedHours).toBe(zero);
  });
  test('Blocking the creation of new item with any field empty', () => {
    instance.state.time = 1;
    instance.state.date = '15/06/2000';
    instance.addItem();
    expect(instance.state.text).toStrictEqual(emptyArray);
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNjaGVkdWxlLnNwZWMuanMiXSwibmFtZXMiOlsidGl0bGUiLCJlbXB0eUFycmF5IiwiQXJyYXkiLCJlbXB0eVN0cmluZyIsInplcm8iLCJtYWtlU2NoZWR1bGUiLCJkZXNjcmliZSIsInNjaGVkdWxlIiwiaW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsInRlc3QiLCJleHBlY3QiLCJ0b0pTT04iLCJ0b01hdGNoU25hcHNob3QiLCJwcm9wcyIsInRvQmUiLCJzdGF0ZSIsIml0ZW1zIiwidG9TdHJpY3RFcXVhbCIsInRpbWUiLCJ0eXBlIiwiZGF0ZSIsInN0dWRpZWRIb3VycyIsImFkZEl0ZW0iLCJ0ZXh0Il0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBQ0E7OztBQUVBLE1BQU1BLEtBQUssR0FBRyxZQUFkO0FBQ0EsTUFBTUMsVUFBVSxHQUFHLElBQUlDLEtBQUosRUFBbkI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsRUFBcEI7QUFDQSxNQUFNQyxJQUFJLEdBQUcsQ0FBYjs7QUFFQSxNQUFNQyxZQUFZLEdBQUlMLEtBQUQsSUFBVztBQUM1QixTQUFPLCtCQUFPLDZCQUFDLGlCQUFEO0FBQVUsSUFBQSxLQUFLLEVBQUVBLEtBQWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQVAsQ0FBUDtBQUNILENBRkQ7O0FBSUFNLFFBQVEsQ0FBQyxvQkFBRCxFQUF1QixNQUFNO0FBQ2pDLFFBQU1DLFFBQVEsR0FBR0YsWUFBWSxDQUFDTCxLQUFELENBQTdCO0FBQ0EsUUFBTVEsUUFBUSxHQUFHRCxRQUFRLENBQUNFLFdBQVQsRUFBakI7QUFFQUMsRUFBQUEsSUFBSSxDQUFDLHNCQUFELEVBQXlCLE1BQU07QUFDL0JDLElBQUFBLE1BQU0sQ0FBQ0osUUFBUSxDQUFDSyxNQUFULEVBQUQsQ0FBTixDQUEwQkMsZUFBMUI7QUFDSCxHQUZHLENBQUo7QUFJQUgsRUFBQUEsSUFBSSxDQUFDLG1CQUFELEVBQXNCLE1BQU07QUFDNUJDLElBQUFBLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDTSxLQUFULENBQWVkLEtBQWhCLENBQU4sQ0FBNkJlLElBQTdCLENBQWtDZixLQUFsQztBQUNILEdBRkcsQ0FBSjtBQUlBVSxFQUFBQSxJQUFJLENBQUMsNEJBQUQsRUFBK0IsTUFBTTtBQUNyQ0MsSUFBQUEsTUFBTSxDQUFDSCxRQUFRLENBQUNRLEtBQVQsQ0FBZUMsS0FBaEIsQ0FBTixDQUE2QkMsYUFBN0IsQ0FBMkNqQixVQUEzQztBQUNBVSxJQUFBQSxNQUFNLENBQUNILFFBQVEsQ0FBQ1EsS0FBVCxDQUFlRyxJQUFoQixDQUFOLENBQTRCSixJQUE1QixDQUFpQ1osV0FBakM7QUFDQVEsSUFBQUEsTUFBTSxDQUFDSCxRQUFRLENBQUNRLEtBQVQsQ0FBZUksSUFBaEIsQ0FBTixDQUE0QkwsSUFBNUIsQ0FBaUNaLFdBQWpDO0FBQ0FRLElBQUFBLE1BQU0sQ0FBQ0gsUUFBUSxDQUFDUSxLQUFULENBQWVLLElBQWhCLENBQU4sQ0FBNEJOLElBQTVCLENBQWlDWixXQUFqQztBQUNBUSxJQUFBQSxNQUFNLENBQUNILFFBQVEsQ0FBQ1EsS0FBVCxDQUFlTSxZQUFoQixDQUFOLENBQW9DUCxJQUFwQyxDQUF5Q1gsSUFBekM7QUFDSCxHQU5HLENBQUo7QUFRQU0sRUFBQUEsSUFBSSxDQUFDLHdEQUFELEVBQTJELE1BQU07QUFDakVGLElBQUFBLFFBQVEsQ0FBQ1EsS0FBVCxDQUFlRyxJQUFmLEdBQXNCLENBQXRCO0FBQ0FYLElBQUFBLFFBQVEsQ0FBQ1EsS0FBVCxDQUFlSyxJQUFmLEdBQXNCLFlBQXRCO0FBQ0FiLElBQUFBLFFBQVEsQ0FBQ2UsT0FBVDtBQUNBWixJQUFBQSxNQUFNLENBQUNILFFBQVEsQ0FBQ1EsS0FBVCxDQUFlUSxJQUFoQixDQUFOLENBQTRCTixhQUE1QixDQUEwQ2pCLFVBQTFDO0FBQ0gsR0FMRyxDQUFKO0FBTUgsQ0ExQk8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNyZWF0ZSB9IGZyb20gJ3JlYWN0LXRlc3QtcmVuZGVyZXInXG5pbXBvcnQgU2NoZWR1bGUgZnJvbSAnLi8uLi9jb21wb25lbnRzL3NjaGVkdWxlL1NjaGVkdWxlJ1xuXG5jb25zdCB0aXRsZSA9ICdUSVRMRSBIRVJFJ1xuY29uc3QgZW1wdHlBcnJheSA9IG5ldyBBcnJheSgpXG5jb25zdCBlbXB0eVN0cmluZyA9ICcnXG5jb25zdCB6ZXJvID0gMFxuXG5jb25zdCBtYWtlU2NoZWR1bGUgPSAodGl0bGUpID0+IHtcbiAgICByZXR1cm4gY3JlYXRlKDxTY2hlZHVsZSB0aXRsZT17dGl0bGV9IC8+KVxufVxuXG5kZXNjcmliZSgnU2NoZWR1bGUgY29tcG9uZW50JywgKCkgPT4ge1xuICAgIGNvbnN0IHNjaGVkdWxlID0gbWFrZVNjaGVkdWxlKHRpdGxlKVxuICAgIGNvbnN0IGluc3RhbmNlID0gc2NoZWR1bGUuZ2V0SW5zdGFuY2UoKVxuXG4gICAgdGVzdCgnTWF0Y2hlcyB0aGUgc25hcHNob3QnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzY2hlZHVsZS50b0pTT04oKSkudG9NYXRjaFNuYXBzaG90KClcbiAgICB9KVxuXG4gICAgdGVzdCgnVGl0bGUgb2Ygc2NoZWR1bGUnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS5wcm9wcy50aXRsZSkudG9CZSh0aXRsZSlcbiAgICB9KVxuXG4gICAgdGVzdCgnRW1wdHkgaXRlbnMgb24gbmV3IGluc3RhY2UnLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS5zdGF0ZS5pdGVtcykudG9TdHJpY3RFcXVhbChlbXB0eUFycmF5KVxuICAgICAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUudGltZSkudG9CZShlbXB0eVN0cmluZylcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLnR5cGUpLnRvQmUoZW1wdHlTdHJpbmcpXG4gICAgICAgIGV4cGVjdChpbnN0YW5jZS5zdGF0ZS5kYXRlKS50b0JlKGVtcHR5U3RyaW5nKVxuICAgICAgICBleHBlY3QoaW5zdGFuY2Uuc3RhdGUuc3R1ZGllZEhvdXJzKS50b0JlKHplcm8pXG4gICAgfSlcblxuICAgIHRlc3QoJ0Jsb2NraW5nIHRoZSBjcmVhdGlvbiBvZiBuZXcgaXRlbSB3aXRoIGFueSBmaWVsZCBlbXB0eScsICgpID0+IHtcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUudGltZSA9IDFcbiAgICAgICAgaW5zdGFuY2Uuc3RhdGUuZGF0ZSA9ICcxNS8wNi8yMDAwJ1xuICAgICAgICBpbnN0YW5jZS5hZGRJdGVtKClcbiAgICAgICAgZXhwZWN0KGluc3RhbmNlLnN0YXRlLnRleHQpLnRvU3RyaWN0RXF1YWwoZW1wdHlBcnJheSk7XG4gICAgfSlcbn0pIl19