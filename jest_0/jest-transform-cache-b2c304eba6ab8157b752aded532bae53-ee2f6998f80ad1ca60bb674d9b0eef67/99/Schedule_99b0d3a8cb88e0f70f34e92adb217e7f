ddf278453345e063d0e4b51ea0a563cf
"use strict";

var _interopRequireWildcard = require("/var/www/html/react-schedule/node_modules/@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("/var/www/html/react-schedule/node_modules/@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _DefaultTable = _interopRequireDefault(require("./../table/DefaultTable"));

var _DefaultForm = _interopRequireDefault(require("./../form/DefaultForm"));

var _date = require("./../../helpers/date");

require("./Schedule.css");

require("./../../index.css");

var _jsxFileName = "/var/www/html/react-schedule/src/components/schedule/Schedule.js";

class Schedule extends _react.Component {
  constructor(props) {
    super(props);

    this.removeItem = index => {
      const items = this.state.items;
      let studiedHours = this.state.studiedHours;
      studiedHours -= parseInt(items[index][0]);
      items.splice(index, 1);
      this.setState({
        items,
        studiedHours
      });
    };

    this.setTime = e => {
      this.setState({
        time: e.target.value
      });
    };

    this.setType = e => {
      this.setState({
        type: e.target.value
      });
    };

    this.setDate = e => {
      this.setState({
        date: e.target.value
      });
    };

    this.addItem = e => {
      e.preventDefault();

      if (this.state.time === '' || this.state.type === '' || this.state.date === '') {
        alert('For add new item, no one field can be empty');
      } else {
        const items = this.state.items;
        let studiedHours = this.state.studiedHours;
        items.push([this.state.time, this.state.type, (0, _date.brazilianDate)(this.state.date)]);
        studiedHours += parseInt(this.state.time);
        this.setState({
          items,
          studiedHours,
          time: '',
          type: '',
          date: ''
        });
      }
    };

    this.state = {
      items: [],
      time: '',
      type: '',
      date: '',
      studiedHours: 0
    };
  }

  render() {
    const inputs = [{
      onChange: this.setTime,
      value: this.state.time,
      type: 'number',
      placeholder: 'Time event'
    }, {
      onChange: this.setDate,
      value: this.state.date,
      type: 'date'
    }];
    const selects = [{
      onChange: this.setType,
      value: this.state.type,
      options: ['Run', 'Speed']
    }];
    const itemsHead = ['Time', 'Type', 'Date', 'Actions'];
    return _react.default.createElement("div", {
      className: "Schedule",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 102
      },
      __self: this
    }, _react.default.createElement("h1", {
      className: "Schedule-header",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 103
      },
      __self: this
    }, this.props.title), _react.default.createElement(_DefaultForm.default, {
      selects: selects,
      inputs: inputs,
      onSubmit: this.addItem,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 104
      },
      __self: this
    }), _react.default.createElement("div", {
      className: "Schedule-border",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 105
      },
      __self: this
    }), _react.default.createElement("div", {
      className: "Schedule-container-table",
      __source: {
        fileName: _jsxFileName,
        lineNumber: 106
      },
      __self: this
    }, _react.default.createElement(_DefaultTable.default, {
      onClick: this.removeItem,
      itemsHead: itemsHead,
      items: this.state.items,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 107
      },
      __self: this
    })), _react.default.createElement("div", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 109
      },
      __self: this
    }, _react.default.createElement("h3", {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 110
      },
      __self: this
    }, this.state.studiedHours, " hours")));
  }

}

var _default = Schedule;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,